image: registry.gitlab.com/canfd/server-tools/ghdl
before_script:
    - "export PATH=/opt/ghdl/bin:$PATH"
    - export LC_ALL=C.UTF-8
    - export LANG=C.UTF-8
    - export PYTHONUNBUFFERED=1

stages:
    - precheck
    - build
    - test_rtl
    - test_gates
    - coverage
    - deploy

check_component:
    stage: precheck
    script:
        - scripts/gen_vivado_component.py
        - cd scripts && ./update_reg_map
        - git diff --exit-code || (echo "Vivado component file or register map products are not up-to-date. Either run scripts/gen_vivado_component.py and scripts/update_reg_map or download the files from this job's artifacts."; exit 1)
    artifacts:
        expire_in: 1 week
        paths:
            - src/component.xml
            - doc/core/registerMap.lyx
            - driver/ctucanfd_regs.h
            - driver/ctucanfd_frame.h
            - src/lib/can_fd_register_map.vhd

###############################################################################
# Build stage
###############################################################################

build_ip_and_tests:
    stage: build
    artifacts:
        paths: &vunit_build_paths
            - test/build
        expire_in: 12 hrs
    script:
        - cd test
        - make elaborate
        # Do not include the huge binaries in artifacts.
        - rm -R build/vunit_out/test_output
    only: &only
        - master     # Run on all changes to master branch
        - tags       # Run on all tags
        - triggers   # Run by trigger (on merge request)
        - web        # Run by manual request from web UI

build_driver:
    stage: build
    only: *only
    script:
        - cd driver
        - "make -j`nproc`"

build_doc:
    stage: build
    only: *only
    image: registry.gitlab.com/canfd/server-tools/lyx
    script:
        - export LC_ALL=en_US.UTF-8
        - export LANG=en_US.UTF-8
        - make -C doc/core
        - make -C doc/driver
    artifacts:
        paths:
            - doc/core/Progdokum.pdf
            - doc/core/ctu_can_fd_architecture.pdf
            - doc/core/tb_architecture.pdf
            - doc/driver/build

build_linux_driver:
    stage: build
    only: *only
    image: registry.gitlab.com/canfd/server-tools/ctucanfd_drvtest
    script:
        - cd driver/linux
        - "make -j`nproc` KDIR=/linux/build CROSS_COMPILE=arm-linux-gnueabihf- ARCH=arm"
        - "make checkpatch KDIR=/linux/build CROSS_COMPILE=arm-linux-gnueabihf- ARCH=arm"
    artifacts:
        paths:
            - driver/linux/ctucanfd.ko

run_synthesis:
    stage: build
    only: *only
    tags:
        - vps
    script:
        - source /opt/xilinx/vivado-2018.2/settings.sh
        - cd synthesis/Vivado/ci_benchmark
        - vivado -mode tcl -source vivado_bechmark_script.tcl
        # Remove reference to UNISIM library, all cell models are included in netlist!
        - sed -i 's\library UNISIM;\\g' typical_design_config/can_top_level.vhd
    artifacts:
        paths:
            - synthesis/Vivado/ci_benchmark/*_design_config
        expire_in: 12 hrs


###############################################################################
# Test RTL stage (fast + nightly)
###############################################################################
test_fast_asic:
    stage: test_rtl
    only: *only
    dependencies: [build_ip_and_tests]
    script:
        - cd test
        - make test_fast_asic
    artifacts:
        when: always
        paths:
            - test/tests_fast_asic.xml
            - test/xunit.xsl
        reports:
            junit: [test/tests_fast_asic.xml]

test_fast_fpga:
    stage: test_rtl
    only: *only
    dependencies: [build_ip_and_tests]
    script:
        - cd test
        - make test_fast_fpga
    artifacts:
        when: always
        paths:
            - test/tests_fast_fpga.xml
            - test/xunit.xsl
        reports:
            junit: [test/tests_fast_fpga.xml]

test_nightly:
    stage: test_rtl
    dependencies: [build_ip_and_tests]
    only:
        - master
    script:
        - cd test
        - make test_nightly
    artifacts:
        when: always
        paths:
            - test/tests_nightly.xml
            - test/build/code_coverage_tests_nightly
            - test/build/functional_coverage
            - test/build/vunit_out/preprocessed
            - test/rtl_lst.txt
            - test/tb_lst.txt
        reports:
            junit: [test/tests_nightly.xml]

    # Nightly tests might fail due to randomization. It is not preffered to
    # kill whole follow-up coverage processing due to this failure!
    # OTOH, fast pipeline can't fail because it must pass before merge!
    allow_failure: true


###############################################################################
# Test RTL stage (Compliance test runs)
###############################################################################
test_compliance_short:
    stage: test_rtl
    dependencies: [build_ip_and_tests]
    only: *only
    script:
        - cd test
        - make test_compliance_short
    artifacts:
        when: always
        paths:
            - test/tests_compliance_short.xml
            - test/xunit.xsl
        reports:
            junit: [test/tests_compliance_short.xml]

    # For now not all compliance tests are debugged, allow failure...
    allow_failure: true
    
test_compliance_full_typ:
    stage: test_rtl
    dependencies: [build_ip_and_tests]
    only:
        - master
    script:
        - cd test
        - make test_compliance_full_typ
    artifacts:
        when: always
        paths:
            - test/tests_compliance_full_typ.xml
            - test/build/code_coverage_tests_compliance_full_typ
            - test/build/functional_coverage
            - test/build/vunit_out/preprocessed
        reports:
            junit: [test/tests_compliance_full_typ.xml]

    # For now not all compliance tests are debugged, allow failure...
    allow_failure: true

test_compliance_full_max:
    stage: test_rtl
    dependencies: [build_ip_and_tests]
    only:
        - master
    script:
        - cd test
        - make test_compliance_full_max
    artifacts:
        when: always
        paths:
            - test/tests_compliance_full_max.xml
            - test/build/vunit_out/preprocessed
        reports:
            junit: [test/tests_compliance_full_max.xml]

    # For now not all compliance tests are debugged, allow failure...
    allow_failure: true

# TODO: Add min run if we find reasonable compromise for run time


###############################################################################
# Test gates (Gate level simulation on post synthesis netlist)
###############################################################################
test_gates_simple:
    stage: test_gates
    dependencies: [build_ip_and_tests, run_synthesis]
    only:
        - master
    script:
        - cd test
        - make test_gates_simple
    artifacts:
        when: always
        paths:
            - test/test_gates_simple.xml
            - test/xunit.xsl
        reports:
            junit: [test/test_gates_simple.xml]

    # Some gates might fail, TODO: Debug
    allow_failure: true

test_gates_compliance:
    stage: test_gates
    dependencies: [build_ip_and_tests, run_synthesis]
    only:
        - master
    script:
        - cd test
        - make test_gates_compliance
    artifacts:
        when: always
        paths:
            - test/test_gates_compliance.xml
            - test/xunit.xsl
        reports:
            junit: [test/test_gates_compliance.xml]

    # Still some compliance tests are not yet fully debugged!
    allow_failure: true



###############################################################################
# Results processing
###############################################################################

process_coverage:
    stage: coverage
    dependencies: [build_ip_and_tests, test_compliance_full_typ, test_nightly]
    only:
        - master
    script:
        # Merge code coverage outputs from nightly and compliance stages, process code coverage
        - cd test/build
        - gcov-tool merge -o code_coverage_merged code_coverage_tests_nightly code_coverage_tests_compliance_full_typ
        - mv code_coverage_tests_nightly/*.gcno code_coverage_merged
        - cd ..

        - make coverage_merged
        - make functional_coverage

        - cd ../scripts
        - chmod +x gen_vrm
        - ./gen_vrm

    coverage: "/lines......: ([^%]+%)/"
    artifacts:
        when: always
        paths:
            - test/code_html
            - test/build/functional_coverage
            - scripts/VRM.html

pages:
    stage: deploy
    when: always
    script:
        - echo "Creating delivery package..."

        # Create directory structure for release
        - mkdir -p public
        - mkdir -p public/rtl
        - mkdir -p public/tb
        - mkdir -p public/doc
        - mkdir -p public/doc/linux_driver
        - mkdir -p public/regression_results
        - mkdir -p public/synthesis

        # Copy RTL
        - cp src/*.vhd public/rtl/
        - cp src/**/*.vhd public/rtl/
        - cp test/rtl_lst.txt public/

        # Copy TB
        - cp test/main_tb/*.vhd public/tb/
        - cp test/main_tb/**/*.vhd public/tb/
        - cp test/main_tb/**/**/*.vhd public/tb/
        - cp test/tb_lst.txt public/
        
        # Compliance test library
        - cp test/main_tb/compliance_library/libSIMULATOR_INTERFACE_LIB.so public/

        # Copy regression results
        - cp test/xunit.xsl public/regression_results/
        - cp test/tests_*.xml public/regression_results/
        - mv test/code_html public/regression_results/coverage || true
        
        # Copy documentation
        - mv doc/core/Progdokum.pdf public/doc/Datasheet.pdf || true
        - cp doc/core/ctu_can_fd_architecture.pdf public/doc/System_Architecture.pdf || true
        - cp doc/core/tb_architecture.pdf public/doc/Testbench.pdf || true
        - cp -R doc/driver/build public/doc/linux_driver || true

        # Copy functional coverage HTML reports
        - mkdir public/regression_results/functional_coverage
        - cp test/build/functional_coverage/*.html public/regression_results/functional_coverage || true
        - cp -R test/build/functional_coverage/html public/regression_results/functional_coverage || true

        # Copy synthesis results + constraints
        - cp -R synthesis/Vivado/ci_benchmark/*_design_config public/synthesis
        - cp synthesis/Constraints/ctu_can_fd.sdc public/synthesis

        # VRM result
        - cp scripts/VRM.html public/regression_results/ || true

        # Check size, compress, check again
        - echo "Size of artifacts before compression:"
        - du -skh public/*
        - tar -czvf public/regression_results/compressed_logs.gz public/regression_results/tests_*.xml
        - rm -f public/regression_results/tests_*.xml
        - echo "Size of artifacts after compression:"
        - du -skh public/*
        
    only:
        - master
    artifacts:
        paths:
            - public

variables:
    GIT_SUBMODULE_STRATEGY: recursive
